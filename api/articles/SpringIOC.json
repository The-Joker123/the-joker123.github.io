{"title":"SpringIOC","uid":"681d0b92aaf251f2f08c8091832e5128","slug":"SpringIOC","date":"2024-01-31T06:33:32.000Z","updated":"2024-01-31T09:23:48.506Z","comments":true,"path":"api/articles/SpringIOC.json","keywords":null,"cover":[],"content":"<h1 id=\"Spring-IOC\"><a href=\"#Spring-IOC\" class=\"headerlink\" title=\"Spring IOC\"></a>Spring IOC</h1><h2 id=\"一、谈谈你对Sping-IOC的了解\"><a href=\"#一、谈谈你对Sping-IOC的了解\" class=\"headerlink\" title=\"一、谈谈你对Sping IOC的了解\"></a>一、谈谈你对Sping IOC的了解</h2><p>1.控制反转是一种思想，不是一个具体实现。</p>\n<p>2.IOC的思想就是将原本在程序中创建的控制权，交由Spring框架来管理。</p>\n<h2 id=\"二、为什么叫控制反转？\"><a href=\"#二、为什么叫控制反转？\" class=\"headerlink\" title=\"二、为什么叫控制反转？\"></a>二、为什么叫控制反转？</h2><p><strong>1</strong>.<strong>控制</strong>：指的是对象创建（实例化、管理）的权力</p>\n<p><strong>2</strong>.<strong>反转：</strong>控制权交给外部环境管理（Spring框架，IOC容器）</p>\n<p>3.控制反转的重要软件设计思想就是，依赖倒置原则。</p>\n<p>4.什么是依赖倒置原则，假设我们设计一辆汽车，先设计轮子→底盘→车架，最后根据车身设计好整个汽车。这里就出现了一个“依赖”关系：汽车依赖车身，车身依赖底盘，底盘依赖轮子。</p>\n<p><img src=\"/post/SpringIOC/Untitled.png\" alt=\"Untitled\"></p>\n<p>这样设计，可维护性很低。假设我们要把轮子尺寸增大，底盘设计就需要改，车身也需要改，同理汽车设计都需要改。</p>\n<p>5.现在我们换一种思路，我们先设计汽车的大概样子，轮子依赖底盘， 底盘依赖车身， 车身依赖汽车。</p>\n<p><img src=\"/post/SpringIOC/Untitled1.png\" alt=\"Untitled\"></p>\n<p>6.这就是依赖导致原则，把原本的高层建筑物“倒置”过来。高层并不用管底层是怎么实现的。这样就不会出现前面的“牵一发动全身”的情况。</p>\n<p>7.控制反转就是，依赖倒置原则的一种代码设计思路，具体采用的方法就是所谓的依赖注入</p>\n<p><img src=\"/post/SpringIOC/Untitled%202.png\" alt=\"Untitled\"></p>\n<p>7.为了理解这几个概念，我们还是用上面汽车的例子。只不过这次换成代码。我们先定义四个Class，车，车身，底盘，轮胎。然后初始化这辆车，最后跑这辆车。代码结构如下：</p>\n<p><img src=\"/post/SpringIOC/Untitled%203.png\" alt=\"Untitled\"></p>\n<aside>\n💡 从上面代码可以看出，Car→Framework→Bottom→Tire\n\n</aside>\n\n<p>8.把轮胎尺寸改成动态的</p>\n<p><img src=\"/post/SpringIOC/Untitled%204.png\" alt=\"Untitled\"></p>\n<p>为了让整个程序正常运行，我们需要做以下改动</p>\n<p><img src=\"/post/SpringIOC/Untitled%205.png\" alt=\"Untitled\"></p>\n<aside>\n💡 由此我们可以看出，我们仅仅修改轮胎的尺寸，修改了整个上面画红色圈的的方法。软件工程中，**这样的设计几乎是不可维护。如果有几千个类的底层，如果每次修改这个类，我们都要修改所依赖的类，维护成本太高。**\n\n</aside>\n\n<p>9.维护成本这么高，所以我们需要进行控制反转，及上层控制下层，而不是下层控制上层。</p>\n<p><strong>所谓依赖注入就是，就是把底层作为参数传入上层类，实现上层控制下层。</strong></p>\n<p><img src=\"/post/SpringIOC/Untitled%206.png\" alt=\"Untitled\"></p>\n<p>什么是<strong>控制反转容器(IoC Container)</strong>呢？其实上面的例子中，对车类进行<strong>初始化</strong>的那段代码发生的地方，就是控制反转容器。</p>\n<p><img src=\"https://picx.zhimg.com/80/v2-c845802f9187953ed576e0555f76da42_720w.webp?source=1940ef5c\" alt=\"https://picx.zhimg.com/80/v2-c845802f9187953ed576e0555f76da42_720w.webp?source=1940ef5c\"></p>\n<aside>\n💡 因为采用了依赖注入，所以初始化时会写大量的new。这里就采用了IOC容器，来生成大量的初始化代码。我们只需要维护一个**Configuration。不用写大量的依赖注入的初始化代码。**\n\n</aside>\n\n<p>10.IOC创建时我们不需要了解创建的细节是什么。下面这是我们自己手动创建的依赖注入的初始化代码。</p>\n<p><img src=\"/post/SpringIOC/Untitled%207.png\" alt=\"Untitled\"></p>\n<p>这个过程中，我们需要了解整个Car/Framework/Bottom/Tire类构造函数是怎么定义的，才能一步一步new/注入。</p>\n<p>而IOC是反过来的，先从最上层开始向下找依赖关系，到达底层之后再往上一步一步new.</p>\n<p><img src=\"/post/SpringIOC/Untitled%208.png\" alt=\"Untitled\"></p>\n<p>这里IoC Container可以直接隐藏具体的创建实例的细节，在我们来看它就像一个工厂：</p>\n<p><img src=\"/post/SpringIOC/Untitled%209.png\" alt=\"Untitled\"></p>\n<p>这就像工厂的客户，我们只需要了解工厂请求一个Car实例，按照配置自动生成。</p>\n","text":"Spring IOC一、谈谈你对Sping IOC的了解1.控制反转是一种思想，不是一个具体实现。 2.IOC的思想就是将原本在程序中创建的控制权，交由Spri...","permalink":"/post/SpringIOC","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Spring-IOC\"><span class=\"toc-text\">Spring IOC</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E3%80%81%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9Sping-IOC%E7%9A%84%E4%BA%86%E8%A7%A3\"><span class=\"toc-text\">一、谈谈你对Sping IOC的了解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E3%80%81%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8F%AB%E6%8E%A7%E5%88%B6%E5%8F%8D%E8%BD%AC%EF%BC%9F\"><span class=\"toc-text\">二、为什么叫控制反转？</span></a></li></ol></li></ol>","author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"第二周","uid":"acd9aa7e47f3c4c4e5b4decd07b11489","slug":"第二周 1a5338e53ba880e190ddda94d3f5b5a7","date":"2024-09-30T16:00:00.000Z","updated":"2025-02-25T10:02:32.475Z","comments":true,"path":"api/articles/第二周 1a5338e53ba880e190ddda94d3f5b5a7.json","keywords":null,"cover":[],"text":"四、多变量线性回归(Linear Regression with Multiple Variables)4.1 多维特征目前为止，我们探讨了单变量/特征的回归模...","permalink":"/post/第二周 1a5338e53ba880e190ddda94d3f5b5a7","photos":[],"count_time":{"symbolsCount":856,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Aurora","slug":"blog-author","avatar":"","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}